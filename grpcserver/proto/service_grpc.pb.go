// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.0--rc2
// source: service.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StockServiceClient is the client API for StockService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StockServiceClient interface {
	GetStocks(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (StockService_GetStocksClient, error)
	SaveOrUpdateStock(ctx context.Context, in *GrpcStock, opts ...grpc.CallOption) (*GrpcResponse, error)
	CreateStocks(ctx context.Context, opts ...grpc.CallOption) (StockService_CreateStocksClient, error)
	RemoveStock(ctx context.Context, in *wrapperspb.Int64Value, opts ...grpc.CallOption) (*GrpcResponse, error)
	CreateDailyStocks(ctx context.Context, opts ...grpc.CallOption) (StockService_CreateDailyStocksClient, error)
	RetrieveDailyByDuration(ctx context.Context, in *GrpcStockDurationRequest, opts ...grpc.CallOption) (StockService_RetrieveDailyByDurationClient, error)
	SaveOrUdpdateDailyStock(ctx context.Context, in *GrpcDailyHistoricalStock, opts ...grpc.CallOption) (*GrpcResponse, error)
}

type stockServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStockServiceClient(cc grpc.ClientConnInterface) StockServiceClient {
	return &stockServiceClient{cc}
}

func (c *stockServiceClient) GetStocks(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (StockService_GetStocksClient, error) {
	stream, err := c.cc.NewStream(ctx, &StockService_ServiceDesc.Streams[0], "/grpcserver.StockService/GetStocks", opts...)
	if err != nil {
		return nil, err
	}
	x := &stockServiceGetStocksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StockService_GetStocksClient interface {
	Recv() (*GrpcStock, error)
	grpc.ClientStream
}

type stockServiceGetStocksClient struct {
	grpc.ClientStream
}

func (x *stockServiceGetStocksClient) Recv() (*GrpcStock, error) {
	m := new(GrpcStock)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *stockServiceClient) SaveOrUpdateStock(ctx context.Context, in *GrpcStock, opts ...grpc.CallOption) (*GrpcResponse, error) {
	out := new(GrpcResponse)
	err := c.cc.Invoke(ctx, "/grpcserver.StockService/SaveOrUpdateStock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockServiceClient) CreateStocks(ctx context.Context, opts ...grpc.CallOption) (StockService_CreateStocksClient, error) {
	stream, err := c.cc.NewStream(ctx, &StockService_ServiceDesc.Streams[1], "/grpcserver.StockService/CreateStocks", opts...)
	if err != nil {
		return nil, err
	}
	x := &stockServiceCreateStocksClient{stream}
	return x, nil
}

type StockService_CreateStocksClient interface {
	Send(*GrpcStock) error
	CloseAndRecv() (*GrpcResponse, error)
	grpc.ClientStream
}

type stockServiceCreateStocksClient struct {
	grpc.ClientStream
}

func (x *stockServiceCreateStocksClient) Send(m *GrpcStock) error {
	return x.ClientStream.SendMsg(m)
}

func (x *stockServiceCreateStocksClient) CloseAndRecv() (*GrpcResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(GrpcResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *stockServiceClient) RemoveStock(ctx context.Context, in *wrapperspb.Int64Value, opts ...grpc.CallOption) (*GrpcResponse, error) {
	out := new(GrpcResponse)
	err := c.cc.Invoke(ctx, "/grpcserver.StockService/RemoveStock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockServiceClient) CreateDailyStocks(ctx context.Context, opts ...grpc.CallOption) (StockService_CreateDailyStocksClient, error) {
	stream, err := c.cc.NewStream(ctx, &StockService_ServiceDesc.Streams[2], "/grpcserver.StockService/CreateDailyStocks", opts...)
	if err != nil {
		return nil, err
	}
	x := &stockServiceCreateDailyStocksClient{stream}
	return x, nil
}

type StockService_CreateDailyStocksClient interface {
	Send(*GrpcDailyHistoricalStock) error
	CloseAndRecv() (*GrpcResponse, error)
	grpc.ClientStream
}

type stockServiceCreateDailyStocksClient struct {
	grpc.ClientStream
}

func (x *stockServiceCreateDailyStocksClient) Send(m *GrpcDailyHistoricalStock) error {
	return x.ClientStream.SendMsg(m)
}

func (x *stockServiceCreateDailyStocksClient) CloseAndRecv() (*GrpcResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(GrpcResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *stockServiceClient) RetrieveDailyByDuration(ctx context.Context, in *GrpcStockDurationRequest, opts ...grpc.CallOption) (StockService_RetrieveDailyByDurationClient, error) {
	stream, err := c.cc.NewStream(ctx, &StockService_ServiceDesc.Streams[3], "/grpcserver.StockService/RetrieveDailyByDuration", opts...)
	if err != nil {
		return nil, err
	}
	x := &stockServiceRetrieveDailyByDurationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StockService_RetrieveDailyByDurationClient interface {
	Recv() (*GrpcDailyHistoricalStock, error)
	grpc.ClientStream
}

type stockServiceRetrieveDailyByDurationClient struct {
	grpc.ClientStream
}

func (x *stockServiceRetrieveDailyByDurationClient) Recv() (*GrpcDailyHistoricalStock, error) {
	m := new(GrpcDailyHistoricalStock)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *stockServiceClient) SaveOrUdpdateDailyStock(ctx context.Context, in *GrpcDailyHistoricalStock, opts ...grpc.CallOption) (*GrpcResponse, error) {
	out := new(GrpcResponse)
	err := c.cc.Invoke(ctx, "/grpcserver.StockService/SaveOrUdpdateDailyStock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StockServiceServer is the server API for StockService service.
// All implementations must embed UnimplementedStockServiceServer
// for forward compatibility
type StockServiceServer interface {
	GetStocks(*emptypb.Empty, StockService_GetStocksServer) error
	SaveOrUpdateStock(context.Context, *GrpcStock) (*GrpcResponse, error)
	CreateStocks(StockService_CreateStocksServer) error
	RemoveStock(context.Context, *wrapperspb.Int64Value) (*GrpcResponse, error)
	CreateDailyStocks(StockService_CreateDailyStocksServer) error
	RetrieveDailyByDuration(*GrpcStockDurationRequest, StockService_RetrieveDailyByDurationServer) error
	SaveOrUdpdateDailyStock(context.Context, *GrpcDailyHistoricalStock) (*GrpcResponse, error)
	mustEmbedUnimplementedStockServiceServer()
}

// UnimplementedStockServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStockServiceServer struct {
}

func (UnimplementedStockServiceServer) GetStocks(*emptypb.Empty, StockService_GetStocksServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStocks not implemented")
}
func (UnimplementedStockServiceServer) SaveOrUpdateStock(context.Context, *GrpcStock) (*GrpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveOrUpdateStock not implemented")
}
func (UnimplementedStockServiceServer) CreateStocks(StockService_CreateStocksServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateStocks not implemented")
}
func (UnimplementedStockServiceServer) RemoveStock(context.Context, *wrapperspb.Int64Value) (*GrpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveStock not implemented")
}
func (UnimplementedStockServiceServer) CreateDailyStocks(StockService_CreateDailyStocksServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateDailyStocks not implemented")
}
func (UnimplementedStockServiceServer) RetrieveDailyByDuration(*GrpcStockDurationRequest, StockService_RetrieveDailyByDurationServer) error {
	return status.Errorf(codes.Unimplemented, "method RetrieveDailyByDuration not implemented")
}
func (UnimplementedStockServiceServer) SaveOrUdpdateDailyStock(context.Context, *GrpcDailyHistoricalStock) (*GrpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveOrUdpdateDailyStock not implemented")
}
func (UnimplementedStockServiceServer) mustEmbedUnimplementedStockServiceServer() {}

// UnsafeStockServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StockServiceServer will
// result in compilation errors.
type UnsafeStockServiceServer interface {
	mustEmbedUnimplementedStockServiceServer()
}

func RegisterStockServiceServer(s grpc.ServiceRegistrar, srv StockServiceServer) {
	s.RegisterService(&StockService_ServiceDesc, srv)
}

func _StockService_GetStocks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StockServiceServer).GetStocks(m, &stockServiceGetStocksServer{stream})
}

type StockService_GetStocksServer interface {
	Send(*GrpcStock) error
	grpc.ServerStream
}

type stockServiceGetStocksServer struct {
	grpc.ServerStream
}

func (x *stockServiceGetStocksServer) Send(m *GrpcStock) error {
	return x.ServerStream.SendMsg(m)
}

func _StockService_SaveOrUpdateStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrpcStock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).SaveOrUpdateStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcserver.StockService/SaveOrUpdateStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).SaveOrUpdateStock(ctx, req.(*GrpcStock))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockService_CreateStocks_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StockServiceServer).CreateStocks(&stockServiceCreateStocksServer{stream})
}

type StockService_CreateStocksServer interface {
	SendAndClose(*GrpcResponse) error
	Recv() (*GrpcStock, error)
	grpc.ServerStream
}

type stockServiceCreateStocksServer struct {
	grpc.ServerStream
}

func (x *stockServiceCreateStocksServer) SendAndClose(m *GrpcResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *stockServiceCreateStocksServer) Recv() (*GrpcStock, error) {
	m := new(GrpcStock)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StockService_RemoveStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.Int64Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).RemoveStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcserver.StockService/RemoveStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).RemoveStock(ctx, req.(*wrapperspb.Int64Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockService_CreateDailyStocks_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StockServiceServer).CreateDailyStocks(&stockServiceCreateDailyStocksServer{stream})
}

type StockService_CreateDailyStocksServer interface {
	SendAndClose(*GrpcResponse) error
	Recv() (*GrpcDailyHistoricalStock, error)
	grpc.ServerStream
}

type stockServiceCreateDailyStocksServer struct {
	grpc.ServerStream
}

func (x *stockServiceCreateDailyStocksServer) SendAndClose(m *GrpcResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *stockServiceCreateDailyStocksServer) Recv() (*GrpcDailyHistoricalStock, error) {
	m := new(GrpcDailyHistoricalStock)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StockService_RetrieveDailyByDuration_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GrpcStockDurationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StockServiceServer).RetrieveDailyByDuration(m, &stockServiceRetrieveDailyByDurationServer{stream})
}

type StockService_RetrieveDailyByDurationServer interface {
	Send(*GrpcDailyHistoricalStock) error
	grpc.ServerStream
}

type stockServiceRetrieveDailyByDurationServer struct {
	grpc.ServerStream
}

func (x *stockServiceRetrieveDailyByDurationServer) Send(m *GrpcDailyHistoricalStock) error {
	return x.ServerStream.SendMsg(m)
}

func _StockService_SaveOrUdpdateDailyStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrpcDailyHistoricalStock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServiceServer).SaveOrUdpdateDailyStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcserver.StockService/SaveOrUdpdateDailyStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServiceServer).SaveOrUdpdateDailyStock(ctx, req.(*GrpcDailyHistoricalStock))
	}
	return interceptor(ctx, in, info, handler)
}

// StockService_ServiceDesc is the grpc.ServiceDesc for StockService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StockService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcserver.StockService",
	HandlerType: (*StockServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveOrUpdateStock",
			Handler:    _StockService_SaveOrUpdateStock_Handler,
		},
		{
			MethodName: "RemoveStock",
			Handler:    _StockService_RemoveStock_Handler,
		},
		{
			MethodName: "SaveOrUdpdateDailyStock",
			Handler:    _StockService_SaveOrUdpdateDailyStock_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetStocks",
			Handler:       _StockService_GetStocks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CreateStocks",
			Handler:       _StockService_CreateStocks_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "CreateDailyStocks",
			Handler:       _StockService_CreateDailyStocks_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "RetrieveDailyByDuration",
			Handler:       _StockService_RetrieveDailyByDuration_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}
